# Alternative GNU Make project makefile autogenerated by Premake

ifndef config
  config=debug
endif

ifndef verbose
  SILENT = @
endif

.PHONY: clean prebuild

SHELLTYPE := posix
ifeq (.exe,$(findstring .exe,$(ComSpec)))
	SHELLTYPE := msdos
endif

# Configurations
# #############################################

RESCOMP = windres
PCH = src/pch.h
PCH_PLACEHOLDER = $(OBJDIR)/$(notdir $(PCH))
GCH = $(PCH_PLACEHOLDER).gch
INCLUDES += -Ilibraries/include -Isrc
FORCE_INCLUDE +=
ALL_CPPFLAGS += $(CPPFLAGS) -MD -MP $(DEFINES) $(INCLUDES)
ALL_RESFLAGS += $(RESFLAGS) $(DEFINES) $(INCLUDES)
LIBS += -lglfw3 -lGL
LDDEPS +=
LINKCMD = $(CXX) -o "$@" $(OBJECTS) $(RESOURCES) $(ALL_LDFLAGS) $(LIBS)
define PREBUILDCMDS
endef
define PRELINKCMDS
endef

ifeq ($(config),debug)
TARGETDIR = ../bin/Debug-linux-x86_64/Physx2D
TARGET = $(TARGETDIR)/libPhysx2D.so
OBJDIR = ../bin-int/Debug-linux-x86_64/Physx2D
DEFINES += -DPHSX2D_BUILD_DLL -DPHSX2D_PLATFORM_LINUX -DPHSX2D_DEBUG -DPHSX2D_ASSERT_ENABLE
ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -m64 -fPIC -g -fvisibility=hidden
ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -m64 -fPIC -g -std=c++20 -fvisibility=hidden
ALL_LDFLAGS += $(LDFLAGS) -Llibraries/lib -L/usr/lib64 -m64 -shared -Wl,-soname=libPhysx2D.so -shared
define POSTBUILDCMDS
	@echo Running postbuild commands
	cp -rf ../bin/Debug-linux-x86_64/Physx2D/libPhysx2D.so ../bin/Debug-linux-x86_64/SandBox
endef

else ifeq ($(config),release)
TARGETDIR = ../bin/Release-linux-x86_64/Physx2D
TARGET = $(TARGETDIR)/libPhysx2D.so
OBJDIR = ../bin-int/Release-linux-x86_64/Physx2D
DEFINES += -DPHSX2D_BUILD_DLL -DPHSX2D_PLATFORM_LINUX -DPHSX2D_RELEASE -DPHSX2D_ASSERT_ENABLE
ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -m64 -O2 -fPIC -fvisibility=hidden
ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -m64 -O2 -fPIC -std=c++20 -fvisibility=hidden
ALL_LDFLAGS += $(LDFLAGS) -Llibraries/lib -L/usr/lib64 -m64 -shared -Wl,-soname=libPhysx2D.so -s -shared
define POSTBUILDCMDS
	@echo Running postbuild commands
	cp -rf ../bin/Release-linux-x86_64/Physx2D/libPhysx2D.so ../bin/Release-linux-x86_64/SandBox
endef

else ifeq ($(config),dist)
TARGETDIR = ../bin/Dist-linux-x86_64/Physx2D
TARGET = $(TARGETDIR)/libPhysx2D.so
OBJDIR = ../bin-int/Dist-linux-x86_64/Physx2D
DEFINES += -DPHSX2D_BUILD_DLL -DPHSX2D_PLATFORM_LINUX -DPHSX2D_DIST -DPHSX2D_ASSERT_ENABLE
ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -m64 -O2 -fPIC -fvisibility=hidden
ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -m64 -O2 -fPIC -std=c++20 -fvisibility=hidden
ALL_LDFLAGS += $(LDFLAGS) -Llibraries/lib -L/usr/lib64 -m64 -shared -Wl,-soname=libPhysx2D.so -s -shared
define POSTBUILDCMDS
	@echo Running postbuild commands
	cp -rf ../bin/Dist-linux-x86_64/Physx2D/libPhysx2D.so ../bin/Dist-linux-x86_64/SandBox
endef

endif

# Per File Configurations
# #############################################


# File sets
# #############################################

GENERATED :=
OBJECTS :=

GENERATED += $(OBJDIR)/Application.o
GENERATED += $(OBJDIR)/Buffer.o
GENERATED += $(OBJDIR)/ComputeShader.o
GENERATED += $(OBJDIR)/camera.o
GENERATED += $(OBJDIR)/defaults.o
GENERATED += $(OBJDIR)/entity.o
GENERATED += $(OBJDIR)/framebuffer.o
GENERATED += $(OBJDIR)/glad.o
GENERATED += $(OBJDIR)/instancedRenderer.o
GENERATED += $(OBJDIR)/math.o
GENERATED += $(OBJDIR)/pch.o
GENERATED += $(OBJDIR)/physics2d.o
GENERATED += $(OBJDIR)/quadtree.o
GENERATED += $(OBJDIR)/renderer2D.o
GENERATED += $(OBJDIR)/shader.o
GENERATED += $(OBJDIR)/stb_image.o
GENERATED += $(OBJDIR)/texture.o
GENERATED += $(OBJDIR)/time.o
GENERATED += $(OBJDIR)/utils.o
GENERATED += $(OBJDIR)/vao.o
GENERATED += $(OBJDIR)/window.o
GENERATED += $(OBJDIR)/world.o
OBJECTS += $(OBJDIR)/Application.o
OBJECTS += $(OBJDIR)/Buffer.o
OBJECTS += $(OBJDIR)/ComputeShader.o
OBJECTS += $(OBJDIR)/camera.o
OBJECTS += $(OBJDIR)/defaults.o
OBJECTS += $(OBJDIR)/entity.o
OBJECTS += $(OBJDIR)/framebuffer.o
OBJECTS += $(OBJDIR)/glad.o
OBJECTS += $(OBJDIR)/instancedRenderer.o
OBJECTS += $(OBJDIR)/math.o
OBJECTS += $(OBJDIR)/pch.o
OBJECTS += $(OBJDIR)/physics2d.o
OBJECTS += $(OBJDIR)/quadtree.o
OBJECTS += $(OBJDIR)/renderer2D.o
OBJECTS += $(OBJDIR)/shader.o
OBJECTS += $(OBJDIR)/stb_image.o
OBJECTS += $(OBJDIR)/texture.o
OBJECTS += $(OBJDIR)/time.o
OBJECTS += $(OBJDIR)/utils.o
OBJECTS += $(OBJDIR)/vao.o
OBJECTS += $(OBJDIR)/window.o
OBJECTS += $(OBJDIR)/world.o

# Rules
# #############################################

all: $(TARGET)
	@:

$(TARGET): $(GENERATED) $(OBJECTS) $(LDDEPS) | $(TARGETDIR)
	$(PRELINKCMDS)
	@echo Linking Physx2D
	$(SILENT) $(LINKCMD)
	$(POSTBUILDCMDS)

$(TARGETDIR):
	@echo Creating $(TARGETDIR)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(TARGETDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(TARGETDIR))
endif

$(OBJDIR):
	@echo Creating $(OBJDIR)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif

clean:
	@echo Cleaning Physx2D
ifeq (posix,$(SHELLTYPE))
	$(SILENT) rm -f  $(TARGET)
	$(SILENT) rm -rf $(GENERATED)
	$(SILENT) rm -rf $(OBJDIR)
else
	$(SILENT) if exist $(subst /,\\,$(TARGET)) del $(subst /,\\,$(TARGET))
	$(SILENT) if exist $(subst /,\\,$(GENERATED)) del /s /q $(subst /,\\,$(GENERATED))
	$(SILENT) if exist $(subst /,\\,$(OBJDIR)) rmdir /s /q $(subst /,\\,$(OBJDIR))
endif

prebuild: | $(OBJDIR)
	$(PREBUILDCMDS)

ifneq (,$(PCH))
$(OBJECTS): $(GCH) | $(PCH_PLACEHOLDER)
$(GCH): $(PCH) | prebuild
	@echo $(notdir $<)
	$(SILENT) $(CXX) -x c++-header $(ALL_CXXFLAGS) -o "$@" -MF "$(@:%.gch=%.d)" -c "$<"
$(PCH_PLACEHOLDER): $(GCH) | $(OBJDIR)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) touch "$@"
else
	$(SILENT) echo $null >> "$@"
endif
else
$(OBJECTS): | prebuild
endif


# File Rules
# #############################################

$(OBJDIR)/glad.o: libraries/src/glad.c
	@echo "$(notdir $<)"
	$(SILENT) $(CC) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/stb_image.o: libraries/src/stb_image.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/Application.o: src/core/Application.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) -include $(PCH_PLACEHOLDER) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/math.o: src/math/math.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) -include $(PCH_PLACEHOLDER) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/pch.o: src/pch.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) -include $(PCH_PLACEHOLDER) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/physics2d.o: src/physics/physics2d.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) -include $(PCH_PLACEHOLDER) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/Buffer.o: src/renderer/Buffer.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) -include $(PCH_PLACEHOLDER) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/framebuffer.o: src/renderer/framebuffer.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) -include $(PCH_PLACEHOLDER) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/instancedRenderer.o: src/renderer/instancedRenderer.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) -include $(PCH_PLACEHOLDER) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/renderer2D.o: src/renderer/renderer2D.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) -include $(PCH_PLACEHOLDER) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/shader.o: src/renderer/shader.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) -include $(PCH_PLACEHOLDER) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/texture.o: src/renderer/texture.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) -include $(PCH_PLACEHOLDER) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/vao.o: src/renderer/vao.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) -include $(PCH_PLACEHOLDER) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/camera.o: src/scene/camera.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) -include $(PCH_PLACEHOLDER) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/entity.o: src/scene/entity.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) -include $(PCH_PLACEHOLDER) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/world.o: src/scene/world.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) -include $(PCH_PLACEHOLDER) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/ComputeShader.o: src/utils/ComputeShader.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) -include $(PCH_PLACEHOLDER) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/defaults.o: src/utils/defaults.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) -include $(PCH_PLACEHOLDER) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/quadtree.o: src/utils/quadtree.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) -include $(PCH_PLACEHOLDER) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/time.o: src/utils/time.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) -include $(PCH_PLACEHOLDER) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/utils.o: src/utils/utils.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) -include $(PCH_PLACEHOLDER) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/window.o: src/window/window.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) -include $(PCH_PLACEHOLDER) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"

-include $(OBJECTS:%.o=%.d)
ifneq (,$(PCH))
  -include $(PCH_PLACEHOLDER).d
endif